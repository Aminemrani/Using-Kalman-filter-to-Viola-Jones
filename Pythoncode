import os
import sys
import cv2
import numpy as np

face_cascade = cv2.CascadeClassifier('C:/Users/Amin/Desktop/Wcode/haarcascade_frontalface_default.xml')


def detect_one_face(im):
    gray=cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)

    faces = face_cascade.detectMultiScale(gray, 1.3, 5)
    if len(faces) == 0:
        return (0,0,0,0)
    return faces[0]


fourcc = cv2.VideoWriter_fourcc(*'MJPG')
out=None



cap = cv2.VideoCapture(1) 
frameCounter = 0
ret ,frame = cap.read()
 
# detect face in first frame
c,r,w,h = detect_one_face(frame)

#initialize the KF
kalman = cv2.KalmanFilter(4,2,0)   # 4 - dimensionality of state, 2 - dimensionality of measurement
state = np.array([c+w/2,r+h/2,0,0], dtype='float64') # initial position
kalman.transitionMatrix = np.array([[1., 0., .1, 0.],  # a rudimentary constant speed model:
                                    [0., 1., 0., .1],  # x_t+1 = x_t + v_t
                                    [0., 0., 1., 0.],
                                    [0., 0., 0., 1.]])
kalman.measurementMatrix = 1. * np.eye(2, 4)      # you can tweak these to make the tracker
kalman.processNoiseCov = 1e-5 * np.eye(4, 4)      # respond faster to change and be less smooth
kalman.measurementNoiseCov = 1e-3 * np.eye(2, 2)
kalman.errorCovPost = 1e-1 * np.eye(4, 4)
kalman.statePost = state

# Write track point for first frame
pt = (0, c+w/2, r+h/2)


while(1):
    ret ,frame = cap.read() # read another frame
    if ret == False:
        break
     
    #find prediction
    prediction = kalman.predict()

    #obtain measurement
    c,r,w,h = detect_one_face(frame)
    if w != 0 and h != 0:   #measurement_valid
        measurement = np.matrix(np.array([c+w/2, r+h/2], dtype='float64')).transpose()
        posterior = kalman.correct(measurement)
        pt = (frameCounter, int(posterior[0]), int(posterior[1]))
    else:
        # use prediction as the tracking result
        pt = (frameCounter, int(prediction[0]), int(prediction[1]))
     
    img2 = cv2.circle(frame, (pt[1], pt[2]), 5, (0,0,255), -1)
    img2=cv2.rectangle(frame,(c,r),(c+w,r+h),(255,0,0),2)
    if out is None:
        out = cv2.VideoWriter("C:/Users/Amin/Desktop/Amin.avi",fourcc, 30.0,(img2.shape[1],img2.shape[0]) )
    out.write(img2)
    cv2.imshow('img2',img2)
    cv2.waitKey(60)




